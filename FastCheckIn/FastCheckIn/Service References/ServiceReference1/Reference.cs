//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace FastCheckIn.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GuestData", Namespace="http://schemas.datacontract.org/2004/07/WindowsService1")]
    public partial class GuestData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ICityField;
        
        private string ICountryField;
        
        private System.DateTime IDateofBirthField;
        
        private string IFirstNameField;
        
        private int IGuest_IDField;
        
        private string INameField;
        
        private int IPhoneField;
        
        private string IStateField;
        
        private string IStreetField;
        
        private System.DateTime ITimestampField;
        
        private string IUserField;
        
        private string IZipField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ICity {
            get {
                return this.ICityField;
            }
            set {
                if ((object.ReferenceEquals(this.ICityField, value) != true)) {
                    this.ICityField = value;
                    this.RaisePropertyChanged("ICity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ICountry {
            get {
                return this.ICountryField;
            }
            set {
                if ((object.ReferenceEquals(this.ICountryField, value) != true)) {
                    this.ICountryField = value;
                    this.RaisePropertyChanged("ICountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime IDateofBirth {
            get {
                return this.IDateofBirthField;
            }
            set {
                if ((this.IDateofBirthField.Equals(value) != true)) {
                    this.IDateofBirthField = value;
                    this.RaisePropertyChanged("IDateofBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IFirstName {
            get {
                return this.IFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IFirstNameField, value) != true)) {
                    this.IFirstNameField = value;
                    this.RaisePropertyChanged("IFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IGuest_ID {
            get {
                return this.IGuest_IDField;
            }
            set {
                if ((this.IGuest_IDField.Equals(value) != true)) {
                    this.IGuest_IDField = value;
                    this.RaisePropertyChanged("IGuest_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IName {
            get {
                return this.INameField;
            }
            set {
                if ((object.ReferenceEquals(this.INameField, value) != true)) {
                    this.INameField = value;
                    this.RaisePropertyChanged("IName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IPhone {
            get {
                return this.IPhoneField;
            }
            set {
                if ((this.IPhoneField.Equals(value) != true)) {
                    this.IPhoneField = value;
                    this.RaisePropertyChanged("IPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IState {
            get {
                return this.IStateField;
            }
            set {
                if ((object.ReferenceEquals(this.IStateField, value) != true)) {
                    this.IStateField = value;
                    this.RaisePropertyChanged("IState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IStreet {
            get {
                return this.IStreetField;
            }
            set {
                if ((object.ReferenceEquals(this.IStreetField, value) != true)) {
                    this.IStreetField = value;
                    this.RaisePropertyChanged("IStreet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ITimestamp {
            get {
                return this.ITimestampField;
            }
            set {
                if ((this.ITimestampField.Equals(value) != true)) {
                    this.ITimestampField = value;
                    this.RaisePropertyChanged("ITimestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IUser {
            get {
                return this.IUserField;
            }
            set {
                if ((object.ReferenceEquals(this.IUserField, value) != true)) {
                    this.IUserField = value;
                    this.RaisePropertyChanged("IUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IZip {
            get {
                return this.IZipField;
            }
            set {
                if ((object.ReferenceEquals(this.IZipField, value) != true)) {
                    this.IZipField = value;
                    this.RaisePropertyChanged("IZip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertGuest", ReplyAction="http://tempuri.org/IService1/InsertGuestResponse")]
        System.Threading.Tasks.Task<bool> InsertGuestAsync(FastCheckIn.ServiceReference1.GuestData GuestInsert);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGuest", ReplyAction="http://tempuri.org/IService1/GetGuestResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FastCheckIn.ServiceReference1.GuestData>> GetGuestAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : FastCheckIn.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<FastCheckIn.ServiceReference1.IService1>, FastCheckIn.ServiceReference1.IService1 {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> InsertGuestAsync(FastCheckIn.ServiceReference1.GuestData GuestInsert) {
            return base.Channel.InsertGuestAsync(GuestInsert);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<FastCheckIn.ServiceReference1.GuestData>> GetGuestAsync() {
            return base.Channel.GetGuestAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/WindowsService1/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService1,
        }
    }
}
